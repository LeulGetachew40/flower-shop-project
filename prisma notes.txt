Generator
    - defines what assets are created when we run the      prisma generate     command.
    - provider  is a class that extends PrismaClient, which is generated by Prisma.
    what is PrismaClient and provider?
        PrismaClient: It's an ORM (Object-Relational Mapping) provided by Prisma. This allows us to interact with our database using JavaScript or TypeScript.
    what is provider in PrismaClient?
        A provider is an object with methods to access the underlying database connector (e.g., Knex or Prisma2). It
        A provider is an object that contains all of the operations exposed by Prisma Client. It's basically just a wrapper around the underlying
        - A Provider is an instance of  PrismaClient that represents a specific database connection


PRISMA
-- to install PRISMA we need to install it using the command, we also need to install the essential things like typescript, ts-node and nodemon...
	
	npm --save-dev install prisma typescript ts-node @types/node nodemon

- ts-node - gives us typescript definitions for node (it makes node with typescript)
- @types/node - also helpful when working with node

-- after installing prisma, we need to initialize it, this will create a prisma directory with schema.prisma file

	npx prisma init --datasource-provider postgresql

- when we initialize prisma, it will give us information on how to interact with it (give us the next steps)

- The FIRST step would be to modify our dbURL

- The SECOND one is OPTIONAL
	
	- if we already have a db and a table created, we will run the command below

		prisma db pull
	
- The THIRD one is to generate a prisma client that is specific to our db

	 PrismaClient: It's an ORM (Object-Relational Mapping) provided by Prisma. This allows us to interact with our database using JavaScript or TypeScript.
		** it is similar to mongoose (but this is for ODM) **

-- to format our schema.prisma file, but we can also install an extension called prisma to handle the same operation
	
	npx prisma format

-- Schema helps us design our db
-- model is used to create a blueprint of our database table, looks similar to class

-- when defining fields of a table in a model we use a certain format

	COLUMN DATATYPE CONSTRAINTS

-- @id is a direct reference to PRIMARY KEY in a postgresql


-- to create a table or apply changes to our table we need to run the command

	npx prisma migrate dev --name <migration_name>
		** this will create a db table if there is none, but it will apply the changes we have made if it finds the table in our db **

-- when we run the command it will create a "migrations" directory, this is what we are using to interact with our lower level postgresql db

	** in the migratiion/<migrations_log> folder that was created after we ran the command, we will find an sql file that was used to run the sql command**
	
	** when we run the command to migrate our db, a new prisma client will be generated everytime we migrate**

-- migrations are sorted in a kind of logging system so we need to identify each "log" using a name, we specify it using --name <migration_name>

-- the prisma client that will be created everytime we run the migration command is a code that we use to interact with our database (THIS IS NOT THE MIGRATION SQL CODE THAT IS CREATED)
	** THIS IS JUST THAT import { prisma } from '@prisma/client' code that we use in our script.ts file**

-- but to use the client in our script.ts code we need to install the client library using a command

	npm install @prisma/client

	- if we want to manually create our client library in the node modules directory, we will use the command, the above command will do it for us too

		npx prisma generate


-- almost everything in prisma is asunchronous so we need to use async functions a lot

-- to compile and run our script.ts file, we will use nodemon which we will specify as an npm script


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js" // take all this prisma code and convert it using the prisma-client-js formatter
  // this is the format that we use when we run the prisma generate command
}

datasource db {
  provider = "postgresql" 
  // we can also work with sqlite, but it doesn't support Json datatypes
  url      = env("DATABASE_URL")
}

// COLUMN DATATYPE CONSTRAINTS
model User{
  // @@id (asc) => sets id as primary key and sorts ascending
  // @unique => adds a unique constraint to column
  // id        Int   @id(strategy: AUTO) @default(auto())
  //                @@index([])            // no index by default
  // email     String @unique              // unique constraint on email field

  // we must define a primary key using @id
  id Int @id @default(autoincrement())
  name String
}

// here we will define three things
// 1. datasource - the db provider and the connection string
// 2. schema generators - they are additional assets that we need to be created
// 3. models - basically entities

// this file is neither javascript nor ts
// this is neiether in SQL nor NoSQL format
// it is its own prisma file format

// the ------------- is the output lower level postgresql code that is generated when this prsma code is ran using a command

// the prisma client is the tool that we use to interact with our lower level db
// before using the client we need to install it
// we will use the command below
// npm i @prisma/client
// after iinstalling it, if we want to manually regenerate the client
// npx prisma generate
// this command will use everything in this file to create a client to inteeact with our db



























